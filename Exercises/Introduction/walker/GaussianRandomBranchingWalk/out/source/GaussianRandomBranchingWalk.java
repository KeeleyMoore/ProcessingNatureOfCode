/* autogenerated by Processing revision 1277 on 2021-11-18 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class GaussianRandomBranchingWalk extends PApplet {

// Exercise I.5
// A Gaussian random walk is defined as one in which the step size (how far the object moves in a given direction) 
// is generated with a normal distribution. Implement this variation of our random walk.

//TODO:: create a branching version, where after X amount of steps,
//       the dot will split into 2 different dots now going on their own path
//       the dots colours should also split going in opposite directions,
//       e.g. one will lose a lot of blue saturation and the other gain the same amount

//TODO: Examples -> Topics -> Advanced Data -> 


Random generator;
ArrayList<Walker> walkers;

// WalkersOriginal walkersOriginal;

 public void setup() {
  /* size commented out by preprocessor */;
  background(255);
  // frameRate(30);
  
  // Create a walker object
  
  float ir = map(width / 2,0, width, 0, 255);
  float ig = map(height / 2, 0, height, 0, 255);
  float ib = map((width / 2 + height / 2) / 2, 0,(width + height) / 2, 0, 255);
  
  //  TODO:: Find out why these array list types arent working
  walkers = new ArrayList<Walker>();
  walkers.add(new Walker(ir, ib, ig, 255, width / 2, height / 2, walkers));
  // walkersOriginal = new WalkersOriginal(ir, ib, ig, 255, width / 2, height / 2);
}

 public void draw() {
  // background(255);
  // Run the walker object
  // println(walkers);
  for (int i = walkers.size()-1; i >= 0; i--) {
    Walker walker = walkers.get(i);
    walker.step();
    if (walker.dead()) {
      // Items can be deleted with remove()
      walkers.remove(i);
    }
  }
  
  // walkersOriginal.step();
}
class Walker {
  int x, y, a;
  float r, g, b;

  int count = 0;

  float life = 2550;
  
  Walker(float ir, float ig, float ib, int ia, int ix, int iy, ArrayList<Walker> walkers) {
    x = ix;
    y = iy;
    r = ir;
    g = ig;
    b = ib;
    a = ia;
    
    generator = new Random();
  }
  
   public void step() {
    stroke(r, g, b, a);
    point(x, y);
    
    count++;
    if (count == 50) {
      float ir = map(x,0, width, 0, 255);
      float ig = map(y, 0, height, 0, 255);
      float ib = map(y, 0,(width + height) / 2, 0, 255);
      walkers.add(new Walker(ir,ig,ib,a,x,y, walkers));
    } 
    
    // if (subwalker != null) {
    //   subwalker.step();
    // }
    
    float stepValueX = (float) generator.nextGaussian() * 2;
    float stepValueY = (float) generator.nextGaussian() * 2;
    float stepx = PApplet.parseInt(random(2)) - stepValueX;
    float stepy = PApplet.parseInt(random(2)) - stepValueY;
    
    x += stepx;
    y += stepy;
  }
  
   public boolean dead() {
    // Balls fade out
    life--;
    if (life < 0) {
      return true;
    } else {
      return false;
    }
  }
}
class Walkers {
  PVector location;
  int x, y, a;
  float r, g, b;
  int count = 0;
  
  Walkers subwalker;
  
  Walkers(float ir, float ig, float ib, int ia, float ix, float iy) {
    // println(ir, ig, ib, ia, ix, iy);
    location =  new PVector(ix, iy);
    // x = ix;
    // y = iy;
    r = ir;
    g = ig;
    b = ib;
    a = ia;
    
    generator = new Random();
  }
  
   public void step() {
    stroke(r, g, b, a);
    point(location.x, location.y);
    
    count++;
    if (count == 50) {
      float ir = map(location.x, 0, width, 0, 255);
      float ig = map(location.y, 0, height, 0, 255);
      float ib = map(location.y, 0,(width + height) / 2, 0, 255);
      subwalker = new Walkers(ir,ig,ib,a,location.x,location.y);
    } 
    
    if (subwalker != null) {
      subwalker.step();
    }
    
    float stepValueX = (float) generator.nextGaussian() * 2;
    float stepValueY = (float) generator.nextGaussian() * 2;
    float stepx = PApplet.parseInt(random(2)) - stepValueX;
    float stepy = PApplet.parseInt(random(2)) - stepValueY;
    
    location.x += stepx;
    location.y += stepy;
  }
}

// inputs   
// float ir = map(width / 2,0, width, 0, 255);
// float ig = map(height / 2, 0, height, 0, 255);
// float ib = map((width / 2 + height / 2) / 2, 0,(width + height) / 2, 0, 255);

// w = new Walkers(ir, ib, ig, 255, width / 2, height / 2);

class WalkersOriginal {
  int x, y, a;
  float r, g, b;
  int count = 0;
  
  WalkersOriginal subwalker;
  
  WalkersOriginal(float ir, float ig, float ib, int ia, int ix, int iy) {
    // println(ir, ig, ib, ia, ix, iy);
    x = ix;
    y = iy;
    r = ir;
    g = ig;
    b = ib;
    a = ia;
    
    generator = new Random();
  }
  
   public void step() {
    stroke(r, g, b, a);
    point(x, y);
    
    count++;
    if (count == 50) {
      float ir = map(x,0, width, 0, 255);
      float ig = map(y, 0, height, 0, 255);
      float ib = map((x + y) / 2, 0,(width + height) / 2, 0, 255);
      subwalker = new WalkersOriginal(ir,ig,ib,a,x,y);
    } 
    
    if (subwalker != null) {
      subwalker.step();
    }
    
    float stepValueX = (float) generator.nextGaussian() * 2;
    float stepValueY = (float) generator.nextGaussian() * 2;
    float stepx = PApplet.parseInt(random(2)) - stepValueX;
    float stepy = PApplet.parseInt(random(2)) - stepValueY;
    
    x += stepx;
    y += stepy;
  }
}


  public void settings() { size(640, 640); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "GaussianRandomBranchingWalk" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
