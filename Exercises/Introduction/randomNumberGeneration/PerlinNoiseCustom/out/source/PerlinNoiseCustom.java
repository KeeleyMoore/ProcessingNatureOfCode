/* autogenerated by Processing revision 1276 on 2021-10-09 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class PerlinNoiseCustom extends PApplet {

// NoiseBasic nb;
NoiseAnimated na;

 public void setup() {
  /* size commented out by preprocessor */;
  // nb = new NoiseBasic();
  na = new NoiseAnimated();
  // noLoop();
}

 public void draw() {
  background(0);
  // nb.create();
  na.create();
}
// float increment = 0.01;

class NoiseAnimated {
  float xoff = 0.0f;
  float animate = 0.0f;
  
  NoiseAnimated() {
    
  }
  
   public void create() {  
    // Optional: adjust noise detail here
    noiseDetail(8,0.65f);
    loadPixels();
    
    animate += 0.01f;
    float xoff = 0.0f; // Start xoff at 0
    // For every x,y coordinate in a 2D space, calculate a noise value and produce a brightness value
    
    for (int x = 0; x < width; x++) {
      
      xoff += increment;   // Increment xoff 
      // For every xoff, start yoff at 0.
      float yoff = 0.0f;
      
      for (int y = 0; y < height; y++) {
        yoff += increment; // Increment yoff
        // Use xoff and yoff for noise().
        // noiseDetail(8,0.65);
        float red = map(noise(xoff, yoff, animate),0,1,70,170);
        // noiseDetail(4,0.65);
        float green = map(noise(xoff, yoff, animate),0,1,70,140);
        // noiseDetail(1,0.65);
        float blue = map(noise(xoff,yoff, animate),0,1,40,110);
        
        
        //Try using this line instead
        //float bright = random(0,255);
        
        
        // Use x and y for pixel location.
        pixels[x + y * width] = color(red, green, blue);
        
      }
    }
    updatePixels();
  }
}
float increment = 0.01f;
float increment2 = 0.1f;

class NoiseBasic {
  float xoff = 0.0f;
  
  NoiseBasic() {
    
  }
  
   public void create() {  
    // Optional: adjust noise detail here
    //noiseDetail(8,0.65f);
    
    loadPixels();
    
    float xoff = 0.0f; // Start xoff at 0
    // For every x,y coordinate in a 2D space, calculate a noise value and produce a brightness value
    
    for (int x = 0; x < width; x++) {
      
      xoff += increment;   // Increment xoff 
      // For every xoff, start yoff at 0.
      float yoff = 0.0f;
      
      for (int y = 0; y < height; y++) {
        yoff += increment2; // Increment yoff
        // Use xoff and yoff for noise().
        noiseDetail(8,0.65f);
        float red = map(noise(xoff, yoff),0,1,10,70);
        noiseDetail(4,0.65f);
        float green = map(noise(xoff, yoff),0,1,70,140);
        noiseDetail(1,0.65f);
        float blue = map(noise(xoff,yoff),0,1,40,110);
        
        
        //Try using this line instead
        //float bright = random(0,255);
        
        
        // Use x and y for pixel location.
        pixels[x + y * width] = color(red, green, blue);
        
      }
    }
    updatePixels();
  }
  
}
// float increment = 0.02;

class NoiseBasicCheckerdPattern {
  float xoff = 0.0f;
  
  NoiseBasicCheckerdPattern() {
    
  }
  
   public void create() {  
    // Optional: adjust noise detail here
    //noiseDetail(8,0.65f);
    
    loadPixels();
    
    float xoff = 0.0f; // Start xoff at 0
    // For every x,y coordinate in a 2D space, calculate a noise value and produce a brightness value
    
    for (int x = 0; x < width; x++) {
      
      xoff += increment;   // Increment xoff 
      // For every xoff, start yoff at 0.
      float yoff = 0.0f;
      
      for (int y = 0; y < height; y++) {
        yoff += increment; // Increment yoff
        // Use xoff and yoff for noise().
        float red = map(noise(xoff),0,1,50,200);
        float green = map(noise(yoff),0,1,50,200);
        float blue = map(noise(xoff,yoff),0,1,50,200);
        
        
        //Try using this line instead
        //float bright = random(0,255);
        
        
        // Use x and y for pixel location.
        pixels[x + y * width] = color(red, green, blue);
        
      }
    }
    updatePixels();
  }
  
}


  public void settings() { size(640, 360); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "PerlinNoiseCustom" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
