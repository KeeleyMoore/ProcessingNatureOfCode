/* autogenerated by Processing revision 1277 on 2021-11-18 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class PerlinLandscape extends PApplet {

Landscape land;
float theta = 0.0f;

 public void setup() {
  
  /* size commented out by preprocessor */;
  land = new Landscape(5,400,400);
}

 public void draw() {
  background(255);
  pushMatrix();
  translate(width / 2,height / 2 + 20, -160);
  rotateX(PI / 3);
  rotateZ(theta);
  land.render(); 
  popMatrix();
  land.calculate();
  
  theta += 0.0025f;
}
public class Landscape {
  int scl; 
  int w, h;
  int rows, cols;  float zoff = 0.0f;  // perlin noise argument
  
  float[][] z;
  
  public Landscape(int scl_,int w_, int h_) {
    scl = scl_;
    w = w_;
    h = h_;
    cols = w / scl;
    rows = h / scl;
    z = new float[cols][rows];
  }
  
   public void calculate() {
    float xoff = 0;
    for (int i = 0; i < cols; i++)
    { 
      float yoff = 0;
      for (int j = 0; j < rows; j++)
      {
        z[i][j] = map(noise(xoff, yoff,zoff), 0, 1, -120, 120);
        yoff += 0.05f;
      }
      xoff += 0.05f;
    }
    zoff += 0.003f;
  }
  
   public void render() {
    // Every cell is an individual quad
    for (int x = 0; x < z.length - 1; x++)
    {
      beginShape(QUAD_STRIP);
      for (int y = 0; y < z[x].length; y++)
      {
        // one quad at a time
        // each quad's color is determined by the height value at each vertex
        // (clean this part up)
        stroke(0);
        float currentElevation = z[x][y];
        float currentShade = map(currentElevation, -120, 120, 0, 255);
        fill(currentShade, 255);
        float xCoordinate = x * scl - w / 2;
        float yCoordinate = y * scl - h / 2;
        vertex(xCoordinate, yCoordinate, z[x][y]);
        vertex(xCoordinate + scl, yCoordinate, z[x + 1][y]);
      }
      endShape();
    }
  }
  
}


  public void settings() { size(300, 300, P3D); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "PerlinLandscape" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
