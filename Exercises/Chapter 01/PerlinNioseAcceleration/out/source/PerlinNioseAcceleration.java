/* autogenerated by Processing revision 1276 on 2021-12-05 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class PerlinNioseAcceleration extends PApplet {

// Exercise 1.6
// Referring back to the Introduction, implement acceleration according to Perlin noise.

Mover mover;

 public void setup() {
  /* size commented out by preprocessor */;
  mover = new Mover();
}

 public void draw() {
  background(255);
  mover.update();
  mover.checkEdges();
  mover.display();
}
class Mover {
  PVector location;
  PVector velocity;
  float acceleration, topSpeed, accelerationIncrease, step = 0.005f;
  
  public Mover() {
    location = new PVector(random(width), height / 2);
    velocity = new PVector(0,0);
    acceleration = 0.0f;
    
    topSpeed = 10;
  }
  
   public void update() {
    velocity.limit(topSpeed);
    accelerationIncrease = noise(acceleration);
    velocity.add(new PVector(noise(accelerationIncrease), 0));
    
    acceleration += step;
    
    location.add(velocity);
  }
  
   public void display() {
    stroke(0);
    fill(175);
    ellipse(location.x, 0 + (accelerationIncrease * 400), 6, 6);
  }
  
   public void checkEdges() {
    if (location.x > width) {
      location.x = 0;
    } else if (location.x < 0) {
      location.x = width;
    }
    
    if (location.y > height) {
      location.y = 0;
    } else if (location.y < 0) {
      location.y = height;
    }
  }
}


  public void settings() { size(300, 300); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "PerlinNioseAcceleration" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
