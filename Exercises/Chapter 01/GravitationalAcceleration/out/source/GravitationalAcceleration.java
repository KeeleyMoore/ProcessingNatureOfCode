/* autogenerated by Processing revision 1276 on 2021-12-05 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class GravitationalAcceleration extends PApplet {

// The Nature of Code
// Daniel Shiffman
// http://natureofcode.com

// A Mover object
Mover mover;

 public void setup() {
  /* size commented out by preprocessor */;
  mover = new Mover(); 
}

 public void draw() {
  background(255);
  
  // Update the position
  mover.update();
  // Display the Mover
  mover.display(); 
}
// The Nature of Code
// Daniel Shiffman
// http://natureofcode.com

class Mover {
  
  // The Mover tracks position, velocity, and acceleration 
  PVector position;
  PVector velocity;
  PVector acceleration;
  // The Mover's maximum speed
  float topspeed;
  
  Mover() {
    // Start in the center
    position = new PVector(width / 2,height / 2);
    velocity = new PVector(0,0);
    topspeed = 5;
  }
  
   public void update() {
    
    // Compute a vector that points from position to mouse
    PVector mouse = new PVector(mouseX,mouseY);
    PVector direction = PVector.sub(mouse,position);
    direction.normalize();

    // Set magnitude of acceleration
    float distance = position.dist(mouse) / 1000;
    float mag = 0.5f - distance;
    direction.setMag(mag);
    
    // Velocity changes according to acceleration
    velocity.add(direction);
    // Limit the velocity by topspeed
    velocity.limit(topspeed);
    // position changes by velocity
    position.add(velocity);
  }
  
   public void display() {
    stroke(0);
    strokeWeight(2);
    fill(127);
    ellipse(position.x,position.y,48,48);
  }
  
}


  public void settings() { size(640, 360); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "GravitationalAcceleration" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
