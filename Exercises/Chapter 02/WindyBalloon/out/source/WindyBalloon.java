/* autogenerated by Processing revision 1276 on 2022-01-12 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class WindyBalloon extends PApplet {



Balloon[] balloons = new Balloon[20];

PVector helium;
PVector wind;
PVector windNoiseTick = new PVector(random(100), random(100));;
PVector noiseTickStep = new PVector(0.1f, 0.1f);

int balloonSize = 30;

 public void setup() {
  /* size commented out by preprocessor */;
  background(255);
  
  for (int i = 0; i < balloons.length; i++) {
    balloons[i] = new Balloon(balloonSize, balloonSize / 4);
  }
  
  // Need to figure out how to reduce heliums height gain when the wind force is stronger
  helium = new PVector(0, -0.02f);
  setWind();
}

 public void setWind() {
  // TODO:: Figure out why the wind tends to the left
  float windX = map(noise(windNoiseTick.x), 0, 1, -1, 1) * 0.4f;
  float windY = map(noise(windNoiseTick.y), 0, 1, -1, 1) * 0.2f;
  wind = new PVector(windX, windY);
  windNoiseTick.add(noiseTickStep);
}

 public void draw() {
  background(255);
  setWind();
  for (int i = 0; i < balloons.length; i++) {
    balloons[i].applyForce(helium);
    balloons[i].applyForce(wind);
    balloons[i].update();
    balloons[i].render();
  }
}
class Balloon {
  PVector location;
  PVector velocity;
  PVector acceleration;
  int balloonSize;
  float halfBalloonSize;
  float topSpeed;
  float mass;
  
  Balloon(int _balloonSize, float _m) {
    balloonSize = _balloonSize;
    halfBalloonSize = _balloonSize / 2;
    acceleration = new PVector(0, 0);
    velocity = new PVector(0, 0);
    location = new PVector(random(width), random(height));
    topSpeed = 20;
    mass = _m;
  }
  
  public void update() {
    velocity.add(acceleration);
    location.add(velocity);
    
    velocity.limit(topSpeed);
    
    acceleration.mult(0);
    checkEdges();
  }
  
  public void render() {
    stroke(0);
    fill(134, 123, 275, 125);
    ellipse(location.x, location.y, balloonSize, balloonSize);
  }
  
  public void applyForce(PVector force) {
    // acceleration.add(force);
    
    PVector f = force.get();
    f.div(mass);
    acceleration.add(f);
  }
  
   public void checkEdges() {
    if (location.x > width) {
      location.x = 0;
    } else if (location.x < 0) {
      location.x = width;
    }
    
    if (location.y < halfBalloonSize - 1) {
      velocity.y *= -0.7f;
      velocity.x *= 0.8f;
      location.y = halfBalloonSize; 
    } else if (location.y > height - (halfBalloonSize - 1)) {
      velocity.y *= -0.5f;
      velocity.x *= 0.8f;
      location.y = height - halfBalloonSize; 
    }
  }
}


  public void settings() { size(900, 600); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "WindyBalloon" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
