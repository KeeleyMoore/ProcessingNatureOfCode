/* autogenerated by Processing revision 1276 on 2021-12-15 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class WindyBalloon extends PApplet {



Balloon balloon;

PVector helium;
PVector wind;
PVector windNoiseTick = new PVector(0.0f, 100);;
PVector noiseTickStep = new PVector(0.1f, 0.1f);

 public void setup() {
  /* size commented out by preprocessor */;
  background(255);
  balloon = new Balloon();
  
  // Need to figure out how to reduce heliums height gain when the wind force is stronger
  helium = new PVector(0, -0.02f);
  setWind();
}

 public void setWind() {
  // TODO:: Figure out wtf is going on with the wind :)
  float windX = (noise(windNoiseTick.x) - 0.5f) /2;
  float windY = (noise(windNoiseTick.y) - 0.5f) /2;
  wind = new PVector(windX, windY);
  windNoiseTick.add(noiseTickStep);
}

 public void draw() {
  background(255);
  setWind();
  // balloon.applyForces([helium, wind]);
  balloon.applyForce(helium);
  balloon.applyForce(wind);
  balloon.update();
  balloon.render();
}
class Balloon {
  PVector location;
  PVector velocity;
  PVector acceleration;
  
  Balloon() {  
    acceleration = new PVector(0, 0);
    velocity = new PVector(0, 0);
    location = new PVector(width / 2, height / 2);
  }
  
  public void update() {
    velocity.add(acceleration);
    location.add(velocity);
    acceleration.mult(0);
    checkEdges();
  }
  
  public void render() {
    stroke(0);
    fill(134, 123, 275);
    ellipse(location.x, location.y, 30, 30);
  }
  
  public void applyForce(PVector force) {
    acceleration.add(force);
    println(acceleration);
  }
  
  // public void applyForces(PVector[] forces) {
  //   for (int i = 0; i < forces.length; i++) {
  //     acceleration.add(forces[i]);
  //   }
  // }
  
   public void checkEdges() {
    if (location.x > width) {
      location.x = 0;
    } else if (location.x < 0) {
      location.x = width;
    }
    // TODO: add padding to the edges equal to half the ellipse size
    // println(location.y, height);
    if (location.y < 14) {
      velocity.mult(0);
      
      location.y = 15; // half of ellipse size
    }
  }
}


  public void settings() { size(400, 600); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "WindyBalloon" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
