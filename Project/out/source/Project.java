/* autogenerated by Processing revision 1276 on 2021-12-14 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Project extends PApplet {



Hopper hopper1;
Hopper hopper2;

BoatMan boatMan;


 public void setup() {
  /* size commented out by preprocessor */;
  hopper1 = new Hopper(width / 2, height / 2);
  hopper2 = new Hopper(width / 2, height / 2);

  boatMan = new BoatMan(width / 2, height / 2);
  background(255);
}

 public void draw() {
  background(255);
  hopper1.render();
  hopper2.render();
  hopper1.step();
  hopper2.step();
  boatMan.update();
  boatMan.render();
}
class BoatMan extends Mover {
  float noiseStepX;
  float noiseStepY;
  
  public BoatMan(float _x, float _y) {
    super(_x, _y);
    noiseStepX = 0;
    noiseStepY = 10;
    acceleration = new PVector(0, 0);
  }

   public void update() {
    acceleration.x += random( -1, 1) * map(noise(noiseStepX), 0, 1, 0, 4);
    acceleration.y += random( -1, 1) * map(noise(noiseStepY), 0, 1, 0, 4);
    // acceleration.x += map(noise(noiseStepX), 0, 1, -5, 5);
    // acceleration.y += map(noise(noiseStepY), 0, 1, -5, 5);
    noiseStepX += 0.01f;
    noiseStepY += 0.01f;
    updateLocation();
  }
  
   public void render() {
    stroke(0);
    fill(175);
    ellipse(location.x, location.y, 10, 10);
  }
}
Random randomeGen;

class Hopper extends ObserveEdges {
  public Hopper(float _x, float _y) {
    super(_x, _y);
    randomeGen = new Random();
  }
  
   public void render() {
    stroke(255, 176, 100);
    ellipse(location.x, location.y, 4, 4);
  }
  
   public void step() {
    float stepValueX = (float) randomeGen.nextGaussian() * 3;
    float stepValueY = (float) randomeGen.nextGaussian() * 3;
    float stepx = PApplet.parseInt(random(1)) - stepValueX;
    float stepy = PApplet.parseInt(random(1)) - stepValueY;
    
    location.x += stepx;
    location.y += stepy;
    checkEdges();
  }
  
   public void checkEdges() {
    if (location.x > width) {
      location.x = 0;
    } else if (location.x < 0) {
      location.x = width;
    }
    
    if (location.y > height) {
      location.y = 0;
    } else if (location.y < 0) {
      location.y = height;
    }
  }
}
class Mover extends ObserveEdges {
  PVector velocity;
  public PVector acceleration;
  
  float topSpeed;
  
  public Mover(float _x, float _y) {
    super(_x, _y);
    velocity = new PVector(random( -2, 2), random( -2,2));
    // acceleration = new PVector(random( -0.005, 0.01), random( -0.5, 0.5));
    // acceleration = _acceleration;
    topSpeed = 10;
  }
  
  public void updateLocation() {
    velocity.add(acceleration);
    velocity.limit(topSpeed);
    
    location.add(velocity);
    checkEdges();
  }
}
class ObserveEdges {
  public PVector location;
  
  public ObserveEdges(float _x, float _y) {
    location = new PVector(_x, _y);
  }
  
   public void checkEdges() {
    if (location.x > width) {
      location.x = 0;
    } else if (location.x < 0) {
      location.x = width;
    }
    
    if (location.y > height) {
      location.y = 0;
    } else if (location.y < 0) {
      location.y = height;
    }
  }
}


  public void settings() { size(600, 600); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Project" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
